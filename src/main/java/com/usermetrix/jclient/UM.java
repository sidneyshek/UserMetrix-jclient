/*
 * UM.java
 * UserMetrix-jclient
 *
 * Copyright (c) 2011 UserMetrix Pty Ltd. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.usermetrix.jclient;

/**
 * Shortcut class with a bunch of static helper methods to take the legwork out
 * of instrumenting your application.
 */
public class UM {
    
    /**
     * Logs an error that has been encountered by the application.
     *
     * @param error The exception that was generated by the error.
     */
    public static void error(Throwable error) {
        StackTraceElement callingMethod = findCaller("error");

        try {
            UserMetrix.getInstance()
                      .error(error,
                             Class.forName(callingMethod.getClassName()));
        } catch (ClassNotFoundException e) {
            System.err.println("Warning: UserMetrix is unable to find calling method");
        }
    }
    
    /**
     * Logs an error that has been encountered by the application.
     *
     * @param message A log message to helps you identify the error.
     * @param error The exception that was generated by the error.
     */
    public static void error(String message, Throwable error) {
        StackTraceElement callingMethod = findCaller("error");

        try {
            UserMetrix.getInstance()
                      .error(message,
                             error,
                             Class.forName(callingMethod.getClassName()));
        } catch (ClassNotFoundException e) {
            System.err.println("Warning: UserMetrix is unable to find calling method");
        }
    }
    
    /**
     * Logs an error has been encountered by the application.
     *
     * @param message A log message that helps you identify the error.
     */
    public static void error(String message) {
        StackTraceElement callingMethod = findCaller("error");

        try {
            UserMetrix.getInstance()
                      .error(message,
                             Class.forName(callingMethod.getClassName()));
            
        } catch (ClassNotFoundException e) {
            System.err.println("Warning: UserMetrix is unable to find calling method");
        }
    }
    
    /**
     * Logs when the user triggers the presentation of a view or screen.     
     */
    public static void view() {
        StackTraceElement callingMethod = findCaller("view");
        
        try {
            UserMetrix.getInstance()
                      .view(callingMethod.getMethodName(),
                            Class.forName(callingMethod.getClassName()));
        } catch (ClassNotFoundException e) {
            System.err.println("Warning: UserMetrix is unable to find calling method");
        }
    }

    /**
     * Logs when the user triggers an event (button click) or particular piece
     * of business logic.
     */
    public static void event() {
        StackTraceElement callingMethod = findCaller("event");

        try {
            UserMetrix.getInstance()
                      .event(callingMethod.getMethodName(),
                             Class.forName(callingMethod.getClassName()));
        } catch (ClassNotFoundException e) {
            System.err.println("Warning: UserMetrix is unable to find calling method");
        }
    }

    private static StackTraceElement findCaller(String type) {
        StackTraceElement result = null;

        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
        for(int i = 0; i < stackTraceElements.length; i++) {
            if (stackTraceElements[i].getClassName().equals("com.usermetrix.jclient.UM") &&
                stackTraceElements[i].getMethodName().equals(type)) {

                i++;
                if (i < stackTraceElements.length) {
                    result = stackTraceElements[i];
                }
                break;
            }            
        }

        return result;
    }
    
}
